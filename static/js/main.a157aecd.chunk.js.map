{"version":3,"sources":["components/Container/Container.module.css","components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Container/Container.js","App.js","index.js","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","currentTarget","value","resetName","resetNumber","className","styles","form","preventDefault","label","input","type","pattern","title","required","placeholder","onChange","button","ContactList","contacts","onDeleteContact","map","id","item","onClick","Filter","filter","Container","children","container","App","JSON","parse","localStorage","getItem","setContacts","useEffect","window","setItem","stringify","setFilter","shortid","generate","find","contact","alert","length","normalizedFilter","toLowerCase","includes","getVisibleContacts","contactId","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a157aecd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__13DU_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3CV08\",\"label\":\"ContactForm_label__2iR_1\",\"input\":\"ContactForm_input__3_1rI\",\"button\":\"ContactForm_button__3PNb7\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(name, number);\n    resetName();\n    resetNumber();\n  };\n\n  const resetName = () => {\n    setName('');\n  };\n\n  const resetNumber = () => {\n    setNumber('');\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label}>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          placeholder=\"Adrian Smith\"\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className={styles.label}>\n        Number\n        <input\n          className={styles.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          placeholder=\"000-00-00\"\n          onChange={handleChange}\n        />\n      </label>\n      <button className={styles.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n//Class usage\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = event => {\n//     const { name, value } = event.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={styles.form} onSubmit={this.handleSubmit}>\n//         <label className={styles.label}>\n//           Name\n//           <input\n//             className={styles.input}\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={name}\n//             placeholder=\"Adrian Smith\"\n//             onChange={this.handleChange}\n//           />\n//         </label>\n\n//         <label className={styles.label}>\n//           Number\n//           <input\n//             className={styles.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             value={number}\n//             placeholder=\"000-00-00\"\n//             onChange={this.handleChange}\n//           />\n//         </label>\n//         <button className={styles.button} type=\"submit\">\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export default ContactForm;\n","import PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(({ name, number, id }) => (\n        <li key={id} className={styles.item}>\n          {name}: {number}\n          <button\n            className={styles.button}\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport styles from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <>\n      <label className={styles.filter}>\n        Find contacts by name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={onChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport styles from './Container.module.css';\n\nfunction Container({ children }) {\n  return <div className={styles.container}>{children}</div>;\n}\n\nContainer.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Container;\n","import React, { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\nimport Container from './components/Container';\nimport './App.css';\n\nexport default function App() {\n  const [contacts, setContacts] = useState(() => {\n    return JSON.parse(localStorage.getItem('contacts')) ?? [];\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n  const [filter, setFilter] = useState('');\n\n  const addContact = (name, number) => {\n    const item = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (name === '' || number === '') {\n      alert('Please enter all fields!');\n      return;\n    }\n\n    if (contacts.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    } else if (contacts.find(contact => contact.number === number)) {\n      alert(`${number} is already in contacts`);\n    } else {\n      setContacts(contacts => [item, ...contacts]);\n    }\n  };\n\n  const changeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  return (\n    <Container>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContact} />\n\n      <h2>Contacts</h2>\n      {contacts.length > 1 && <Filter value={filter} onChange={changeFilter} />}\n\n      {contacts.length > 0 ? (\n        <ContactList\n          contacts={getVisibleContacts()}\n          onDeleteContact={deleteContact}\n        />\n      ) : (\n        <p>Currently your phonebook has no contacts. Please add them.</p>\n      )}\n    </Container>\n  );\n}\n\n//Class usage\n// class App extends Component {\n//   state = {\n//     contacts: [\n//       { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//       { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//       { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//       { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//     ],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n\n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     const nextContacts = this.state.contacts;\n//     const prevContacts = prevState.contacts;\n\n//     if (nextContacts !== prevContacts) {\n//       localStorage.setItem('contacts', JSON.stringify(nextContacts));\n//     }\n//   }\n\n//   addContact = ({ name, number }) => {\n//     const item = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const { contacts } = this.state;\n\n//     if (name === '' || number === '') {\n//       alert('Please enter all fields!');\n//       return;\n//     }\n\n//     if (contacts.find(contact => contact.name === name)) {\n//       alert(`${name} is already in contacts`);\n//       return;\n//     } else if (contacts.find(contact => contact.number === number)) {\n//       alert(`${number} is already in contacts`);\n//     } else {\n//       this.setState(({ contacts }) => ({\n//         contacts: [item, ...contacts],\n//       }));\n//     }\n//   };\n\n//   changeFilter = event => {\n//     this.setState({ filter: event.currentTarget.value });\n//   };\n\n//   getVisibleContacts = () => {\n//     const { filter, contacts } = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n//     }));\n//   };\n\n//   render() {\n//     const { filter, contacts } = this.state;\n//     const visibleContacts = this.getVisibleContacts();\n\n//     return (\n//       <Container>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={this.addContact} />\n\n//         <h2>Contacts</h2>\n//         {contacts.length > 1 && (\n//           <Filter value={filter} onChange={this.changeFilter} />\n//         )}\n\n//         {contacts.length > 0 ? (\n//           <ContactList\n//             contacts={visibleContacts}\n//             onDeleteContact={this.deleteContact}\n//           />\n//         ) : (\n//           <p>Currently your phonebook has no contacts. Please add them.</p>\n//         )}\n//       </Container>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__fa7qz\",\"button\":\"ContactList_button__1Uu2M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__3OAzr\",\"filter\":\"Filter_filter__3KrEp\"};"],"sourceRoot":""}